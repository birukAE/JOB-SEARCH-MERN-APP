{"version":3,"sources":["../source/RelativeTimeFormat.test.js"],"names":["en","tiny","RelativeTimeFormat","addLocale","ccp","de","ru","to","ar_AE","pt","pt_PT","zh","setDefaultLocale","describe","it","expect","style","throw","numeric","rtf","format","equal","formatToParts","Symbol","localeMatcher","Number","isFinite","Infinity","undefined","pluralRules","NumberFormat","Intl","enLongDay","long","day","previous","current","next","deep","type","value","unit","prototype","numberFormat","supportedLocalesOf","should","timeZone","resolvedOptions","locale","numberingSystem","styleFallback"],"mappings":"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","sourcesContent":["import ccp from '../locale/ccp.json'\r\nimport de from '../locale/de.json'\r\nimport en from '../locale/en.json'\r\nimport ru from '../locale/ru.json'\r\nimport to from '../locale/to.json'\r\nimport ar_AE from '../locale/ar-AE.json'\r\nimport pt from '../locale/pt.json'\r\nimport pt_PT from '../locale/pt-PT.json'\r\nimport zh from '../locale/zh.json'\r\n\r\nimport RelativeTimeFormat from './RelativeTimeFormat'\r\n\r\nen.tiny = {\r\n  \"year\": \"{0}yr\",\r\n  \"month\": \"{0}mo\",\r\n  \"week\": \"{0}wk\",\r\n  \"day\": \"{0}d\",\r\n  \"hour\": \"{0}h\",\r\n  \"minute\": \"{0}m\",\r\n  \"second\": \"{0}s\",\r\n  \"now\": \"now\"\r\n}\r\n\r\nRelativeTimeFormat.addLocale(ccp)\r\nRelativeTimeFormat.addLocale(de)\r\nRelativeTimeFormat.addLocale(en)\r\nRelativeTimeFormat.addLocale(ru)\r\nRelativeTimeFormat.addLocale(to)\r\nRelativeTimeFormat.addLocale(ar_AE)\r\nRelativeTimeFormat.addLocale(pt)\r\nRelativeTimeFormat.addLocale(pt_PT)\r\nRelativeTimeFormat.addLocale(zh)\r\n\r\n// Just so this function code is covered.\r\n// It's \"en\" by default.\r\nRelativeTimeFormat.setDefaultLocale('en')\r\n\r\ndescribe('Intl.RelativeTimeFormat', () => {\r\n  it('should validate options', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw(\"Invalid \\\"style\\\" option\")\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw(\"Invalid \\\"numeric\\\" option\")\r\n  })\r\n\r\n  it('should fall back to default locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"numeric\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw('Invalid \"numeric\" option')\r\n  })\r\n\r\n  it('should validate \"unit\" argument', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(() => rtf.format(-1)).to.throw('\"unit\" argument is required')\r\n    expect(() => rtf.formatToParts(-1)).to.throw('\"unit\" argument is required')\r\n    expect(() => rtf.format(-1, 0)).to.throw('Invalid \"unit\" argument')\r\n    if (typeof Symbol !== 'undefined') {\r\n      expect(() => rtf.format(-1, Symbol())).to.throw('Invalid \"unit\" argument')\r\n    }\r\n  })\r\n\r\n  it('should use the passed \"style\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { style: \"short\" })\r\n    expect(rtf.format(-1, \"year\")).to.equal(\"1 yr. ago\")\r\n  })\r\n\r\n  it('should throw when \"style\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw('Invalid \"style\" option')\r\n  })\r\n\r\n  it('should use the passed \"localeMatcher\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en-XX\", { localeMatcher: \"lookup\" })\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it('should throw if no supported locale was found', () => {\r\n    RelativeTimeFormat.setDefaultLocale('xx')\r\n    expect(() => new RelativeTimeFormat()).to.throw(\"No supported locale was found\")\r\n    RelativeTimeFormat.setDefaultLocale('en')\r\n  })\r\n\r\n  it('should format relative time', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n    expect(rtf.format(2.15, \"day\")).to.equal(\"in 2.15 days\")\r\n    expect(rtf.format(100, \"day\")).to.equal(\"in 100 days\")\r\n  })\r\n\r\n  it('should throw for non-finite numbers', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    // Test with `Number.isFinite`.\r\n    if (Number.isFinite) {\r\n      expect(() => rtf.format(-Infinity, \"day\")).to.throw(\"Invalid \\\"number\\\" argument\")\r\n    }\r\n    // Test without `Number.isFinite`.\r\n    const isFinite = Number.isFinite\r\n    Number.isFinite = undefined\r\n    expect(rtf.format(-Infinity, \"day\")).to.equal(\"∞ days ago\")\r\n    Number.isFinite = isFinite\r\n  })\r\n\r\n  it('should handle cases when no plural rules function is available for a locale', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(-1, \"second\")).to.equal(\"1 second ago\")\r\n    expect(rtf.format(-2, \"second\")).to.equal(\"2 seconds ago\")\r\n    // Emulate a non-supported locale.\r\n    // There seems to be no such locale in CLDR\r\n    // for which \"plural rules\" function is missing.\r\n    rtf.pluralRules = undefined\r\n    expect(rtf.format(-1, \"second\")).to.equal(\"1 seconds ago\")\r\n    expect(rtf.format(-2, \"second\")).to.equal(\"2 seconds ago\")\r\n  })\r\n\r\n  it('should fall back to \"other\" quantifier if others have been removed as an optimization', () => {\r\n    const rtf = new RelativeTimeFormat(\"ru\")\r\n    // `2` is classified as \"few\" in Russian.\r\n    // The rule for \"few\" is identical to that for \"other\"\r\n    // so the rule for \"few\" is omitted from locale data\r\n    // to reduce bundle size.\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 дня назад\")\r\n  })\r\n\r\n  it('should throw if a time unit is unsupported', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(() => rtf.format(-1, \"decade\")).to.throw(\"Invalid \\\"unit\\\" argument: decade\")\r\n  })\r\n\r\n  it('should format yesterday/today/tomorrow', () => {\r\n    const rtf = new RelativeTimeFormat(\"de\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"vorgestern\")\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"gestern\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"heute\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"morgen\")\r\n    expect(rtf.format(2, \"day\")).to.equal(\"übermorgen\")\r\n\r\n    expect(rtf.format(0, \"second\")).to.equal(\"jetzt\")\r\n  })\r\n\r\n  it('should use \"Intl.NumberFormat\" (when available)', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1,000 days\")\r\n  })\r\n\r\n  it('should fall back when \"Intl.NumberFormat\" is not available', () => {\r\n    const NumberFormat = Intl.NumberFormat\r\n    // I imagine `Intl` object getting \"frozen\" in future.\r\n    delete Intl.NumberFormat\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1000 days\")\r\n    Intl.NumberFormat = NumberFormat\r\n  })\r\n\r\n  it('shouldn\\'t format yesterday/today/tomorrow when there\\'s no locale data', () => {\r\n    const enLongDay = { ...en.long.day }\r\n    delete en.long.day.previous\r\n    delete en.long.day.current\r\n    delete en.long.day.next\r\n\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"in 0 days\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"in 1 day\")\r\n\r\n    en.long.day = enLongDay\r\n  })\r\n\r\n  it('should accept an array of locales', () => {\r\n    const rtf = new RelativeTimeFormat([\"en\"])\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should resolve locales as \"best fit\"', () => {\r\n    const rtf = new RelativeTimeFormat('en-XX')\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should fallback to default system locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should support plural units', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"days\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should support negative zero', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(0, \"day\")).to.equal(\"in 0 days\")\r\n    expect(rtf.format(-0, \"day\")).to.equal(\"0 days ago\")\r\n    expect(rtf.formatToParts(-0, \"second\")).to.deep.equal([\r\n      { type: \"integer\", value: \"0\", unit: \"second\" },\r\n      { type: \"literal\", value: \" seconds ago\" }\r\n    ])\r\n  })\r\n\r\n  it('should support string numbers', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(\"0\", \"day\")).to.equal(\"in 0 days\")\r\n  })\r\n\r\n  it('should format to parts', () => {\r\n    let rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    // `Intl.NumberFormat` doesn't have `formatToParts()`\r\n    // in Node.js version 9.x.\r\n    // In Node.js version 12.x it does have that method.\r\n    if (Intl.NumberFormat.prototype.formatToParts) {\r\n      // Test with `Intl.NumberFormat.prototype.formatToParts`.\r\n      expect(rtf.formatToParts(1000, \"day\")).to.deep.equal([\r\n        { type: \"literal\", value: \"in \" },\r\n        { type: \"integer\", value: \"1\", unit: \"day\" },\r\n        { type: \"group\", value: \",\", unit: \"day\" },\r\n        { type: \"integer\", value: \"000\", unit: \"day\" },\r\n        { type: \"literal\", value: \" days\" }\r\n      ])\r\n      // Test without `Intl.NumberFormat.prototype.formatToParts`.\r\n      const numberFormat = rtf.numberFormat\r\n      rtf.numberFormat = undefined\r\n      expect(rtf.formatToParts(1000, \"day\")).to.deep.equal([\r\n        { type: \"literal\", value: \"in \" },\r\n        { type: \"integer\", value: \"1000\", unit: \"day\" },\r\n        { type: \"literal\", value: \" days\" }\r\n      ])\r\n      rtf.numberFormat = numberFormat\r\n    }\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(-100, \"day\")).to.deep.equal([\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days ago\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts with numeric=\"auto\"', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    expect(rtf.formatToParts(-1, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"yesterday\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts (non-English)', () => {\r\n    // Tonga (Tonga Islands)\r\n    const rtf = new RelativeTimeFormat(\"to\")\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"ʻi he ʻaho ʻe \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" }\r\n    ])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should list supported locales', function() {\r\n    expect(RelativeTimeFormat.supportedLocalesOf(['es-ES', 'ru', 'ru-XX', 'en-GB']))\r\n      .to.deep.equal(['ru', 'ru-XX', 'en-GB'])\r\n    expect(RelativeTimeFormat.supportedLocalesOf('ru-XX')).to.deep.equal(['ru-XX'])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should throw when \"locales\" argument is not valid', () => {\r\n    expect(() => RelativeTimeFormat.supportedLocalesOf(123)).to.throw(\"Invalid \\\"locales\\\" argument\")\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => RelativeTimeFormat.supportedLocalesOf([\"en\"], { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it('should quantify as \"other\" when no quantifier function is present for a locale', () => {\r\n    new RelativeTimeFormat(\"ccp\").format(1, \"quarter\").should.equal(\"𑄷 𑄖𑄨𑄚𑄟𑄏𑄬\")\r\n  })\r\n\r\n  it('should use quantify for a language of a specific locale', () => {\r\n    // Will use `quantify` for \"ar\" language.\r\n    new RelativeTimeFormat(\"ar-AE\").format(-1, \"year\").should.equal(\"قبل سنة واحدة\")\r\n    new RelativeTimeFormat(\"ar-AE\").format(-2, \"year\").should.equal(\"قبل سنتين\")\r\n    new RelativeTimeFormat(\"ar-AE\").format(-3, \"year\").should.equal(\"قبل ٣ سنوات\")\r\n    new RelativeTimeFormat(\"ar-AE\").format(-1.23, \"year\").should.equal(\"قبل ١٫٢٣ سنة\")\r\n  })\r\n\r\n  it('should use correct quantify for Portuguese (\"pt\") and European Portuguese (\"pt-PT\")', () => {\r\n    new RelativeTimeFormat(\"pt\").format(1.5, \"day\").should.equal(\"em 1,5 dia\")\r\n    new RelativeTimeFormat(\"pt-PT\").format(1.5, \"day\").should.equal(\"dentro de 1,5 dias\")\r\n  })\r\n\r\n  it('should show resolved options', () => {\r\n    expect(new RelativeTimeFormat('ru-XX', { timeZone: 'UTC' }).resolvedOptions()).to.deep.equal({\r\n      locale: \"ru\",\r\n      style: \"long\",\r\n      numeric: \"always\",\r\n      numberingSystem: \"latn\"\r\n    })\r\n  })\r\n\r\n  it('should support \"tiny\" style (for `javascript-time-ago`)', () => {\r\n    expect(new RelativeTimeFormat(\"en\", { style: \"tiny\", styleFallback: true }).format(-1, \"day\")).to.equal(\"1d\")\r\n  })\r\n\r\n  it('should fall back to \"long\" style (for `javascript-time-ago`)', () => {\r\n    expect(new RelativeTimeFormat(\"en\", { style: \"exotic\", styleFallback: true }).format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  // Node.js 11.x seems to not support `zh-Hans-CN` on `Intl.NumberFormat` for some reason.\r\n  // it('should support non-\"latn\" numbering systems', () => {\r\n  //   // the nu extension key requests a numbering system, e.g. Chinese decimal\r\n  //   expect(new RelativeTimeFormat('zh-Hans-CN-u-nu-hanidec').format(-123456.789, \"day\")).to.equal(\"一二三,四五六.七八九\")\r\n  //   expect(new RelativeTimeFormat('zh-Hans-CN').format(-123456.789, \"day\")).to.equal(\"123,456.789 days ago\")\r\n  // })\r\n})"],"file":"RelativeTimeFormat.test.js"}